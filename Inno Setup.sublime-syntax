%YAML 1.2
---
name: 'Inno Setup'
file_extensions: [iss, isl]
scope: source.inno

variables:
  sections: '(?:Code|Components|CustomMessages|Dirs|Files|Icons|INI|InstallDelete|LangOptions|Languages|Messages|Registry|Run|Setup|Tasks|Types|UninstallDelete|UninstallRun)'
  setup_directives_boolean: '(?:ChangesAssociations|ChangesEnvironment|CreateUninstallRegKey|Uninstallable)'
  setup_directives_other: '(?:AllowCancelDuringInstall|AllowNetworkDrive|AllowNoIcons|AllowRootDirectory|AllowUNCPath|AlwaysRestart|AlwaysShowComponentsList|AlwaysShowDirOnReadyPage|AlwaysShowGroupOnReadyPage|AlwaysUsePersonalGroup|AppComments|AppContact|AppCopyright|AppendDefaultDirName|AppendDefaultGroupName|AppId|AppModifyPath|AppMutex|AppName|AppPublisher|AppPublisherURL|AppReadmeFile|AppSupportPhone|AppSupportURL|AppUpdatesURL|AppVerName|AppVersion|ArchitecturesAllowed|ArchitecturesInstallIn64BitMode|ASLRCompatible|BackColor|BackColor2|BackColorDirection|BackSolid|CloseApplications|CloseApplicationsFilter|Compression|CompressionThreads|CreateAppDir|DefaultDialogFontName|DefaultDirName|DefaultGroupName|DefaultUserInfoName|DefaultUserInfoOrg|DefaultUserInfoSerial|DEPCompatible|DirExistsWarning|DisableDirPage|DisableFinishedPage|DisableProgramGroupPage|DisableReadyMemo|DisableReadyPage|DisableStartupPrompt|DisableWelcomePage|DiskClusterSize|DiskSliceSize|DiskSpanning|EnableDirDoesntExistWarning|Encryption|ExtraDiskSpaceRequired|FlatComponentsList|InfoAfterFile|InfoBeforeFile|InternalCompressLevel|LanguageDetectionMethod|LicenseFile|LZMAAlgorithm|LZMABlockSize|LZMADictionarySize|LZMAMatchFinder|LZMANumBlockThreads|LZMANumFastBytes|LZMAUseSeparateProcess|MergeDuplicateFiles|MinVersion|MissingRunOnceIdsWarning|OnlyBelowVersion|Output|OutputBaseFilename|OutputDir|OutputManifestFile|Password|PrivilegesRequired|PrivilegesRequiredOverridesAllowed|ReserveBytes|RestartApplications|RestartIfNeededByRun|SetupIconFile|SetupLogging|SetupMutex|ShowComponentSizes|ShowLanguageDialog|ShowTasksTreeLines|SignedUninstaller|SignedUninstallerDir|SignTool|SignToolMinimumTimeBetween|SignToolRetryCount|SignToolRetryDelay|SignToolRunMinimized|SlicesPerDisk|SolidCompression|SourceDir|TerminalServicesAware|TimeStampRounding|TimeStampsInUTC|TouchDate|TouchTime|UninstallDisplayIcon|UninstallDisplayName|UninstallDisplaySize|UninstallFilesDir|UninstallLogMode|UninstallRestartComputer|UpdateUninstallLogAppName|UsedUserAreasWarning|UsePreviousAppDir|UsePreviousGroup|UsePreviousLanguage|UsePreviousPrivigeles|UsePreviousPrivileges|UsePreviousSetupType|UsePreviousTasks|UsePreviousUserInfo|UserInfoPage|UseSetupLdr|VersionInfoCompany|VersionInfoCopyright|VersionInfoDescription|VersionInfoOriginalFileName|VersionInfoProductName|VersionInfoProductTextVersion|VersionInfoProductVersion|VersionInfoTextVersion|VersionInfoVersion|WindowResizable|WindowShowCaption|WindowStartMaximized|WindowVisible|WizardImageAlphaFormat|WizardImageFile|WizardImageStretch|WizardResizable|WizardSizePercent|WizardSmallImageFile|WizardStyle)'
  setup_directives_deprecated: '(?:AlwaysCreateUninstallIcon|DisableAppendDir|DontMergeDuplicateFiles|MessagesFile|UninstallIconFile|UninstallIconName|UninstallStyle|WizardImageBackColor|WizardSmallImageBackColor)'
  lang_options_directives: '(?:CopyrightFontName|CopyrightFontSize|DialogFontName|DialogFontSize|LanguageCodePage|LanguageID|LanguageName|RightToLeft|TitleFontName|TitleFontSize|WelcomeFontName|WelcomeFontSize)'
  parameters_boolean: '(?:AfterInstall|BeforeInstall|Check|Components|Tasks)'
  parameters_flag: '(?:Flags)'
  parameters_keyword: '(?:Attribs|Permissions|Root|Type|Types|ValueType|Verb)'
  parameters_other: '(?:AppUserModelID|AppUserModelToastActivatorCLSID|Comment|CopyMode|Description|DestDir|DestName|Excludes|ExternalSize|ExtraDiskSpaceRequired|Filename|FontInstall|GroupDescription|HotKey|IconFilename|IconIndex|InfoAfterFile|InfoBeforeFile|Key|Languages|LicenseFile|MessagesFile|MinVersion|Name|OnlyBelowVersion|Parameters|RunOnceId|Section|Source|StatusMsg|String|StrongAssemblyName|Subkey|ValueData|ValueName|WorkingDir)'
  keywords_setup: '(?:admin|append|arm64|auto|BT|bzip|bzip\/\d|clAqua|classic|clBlack|clBlue|clFuchsia|clGray|clGreen|clLime|clMaroon|clNavy|clOlive|clPurple|clRed|clSilver|clTeal|clWhite|clYellow|commandline|current|defined|dialog|force|HC|ia64|lefttoright|locale|lowest|lzma|lzma2|lzma2\/fast|lzma2\/max|lzma2\/normal|lzma2\/ultra|lzma2\/ultra64|lzma\/fast|lzma\/max|lzma\/normal|lzma\/ultra|lzma\/ultra64|modern|new|no|none|overwrite|premultiplied|toptobottom|uilanguage|x64|x86|yes|zip|zip\/\d)'
  keywords_other: '(?:admins|authusers|binary|compact|creatorowner|custom|dirifempty|dword|edit|everyone|expandsz|files|filesandordirs|full|guests|hidden|HKA(?:32|64)?|HKCC(?:32|64)?|HKCR(?:32|64)?|HKCU(?:32|64)?|HKLM(?:32|64)?|HKU(?:32|64)?|modify|multisz|networkservice|none|notcontentindexed|open|print|printto|qword|read|readexec|readonly|service|string|system|users)'
  flags: '(?:32bit|64bit|allowunsafefiles|checkablealone|checkedonce|closeonexit|comparetimestamp|confirmoverwrite|createallsubdirs|createkeyifdoesntexist|createonlyiffileexists|createvalueifdoesntexist|deleteafterinstall|deletekey|deletevalue|disablenouninstallwarning|dontcloseonexit|dontcopy|dontcreatekey|dontinheritcheck|dontlogparameters|dontverifychecksum|excludefromshowinnewinstall|exclusive|external|fixed|foldershortcut|fontisnttruetype|gacinstall|hidewizard|ignoreversion|iscustom|isreadme|nocompression|noencryption|noerror|noregerror|nowait|onlyifdestfileexists|onlyifdoesntexist|overwritereadonly|postinstall|preservestringtype|preventpinning|promptifolder|recursesubdirs|regserver|regtypelib|replacesameversion|restart|restartreplace|runascurrentuser|runasoriginaluser|runhidden|runmaximized|runminimized|setntfscompression|sharedfile|shellexec|sign|signonce|skipifdoesntexist|skipifnotsilent|skipifsilent|skipifsourcedoesntexist|solidbreak|sortfilesbyextension|sortfilesbyname|touch|unchecked|uninsalwaysuninstall|uninsclearvalue|uninsdeleteentry|uninsdeletekey|uninsdeletekeyifempty|uninsdeletesection|uninsdeletesectionifempty|uninsdeletevalue|uninsneveruninstall|uninsnosharedfileprompt|uninsremovereadonly|uninsrestartdelete|unsetntfscompression|useapppaths|waituntilidle|waituntilterminated)'
  constants: '(?:\\|app|autoappdata|autocf|autocf32|autocf64|autodesktop|autodocs|autofonts|autopf|autopf32|autopf64|autoprograms|autostartmenu|autostartup|autotemplates|cmd|commonappdata|commoncf|commoncf32|commoncf64|commondesktop|commondocs|commonfonts|commonpf|commonpf32|commonpf64|commonprograms|commonstartmenu|commonstartup|commontemplates|computername|dao|dotnet11|dotnet20|dotnet2032|dotnet2064|dotnet40|dotnet4032|dotnet4064|group|groupname|hwnd|language|localappdata|log|sd|src|srcexe|sys|sysnative|sysuserinfoname|sysuserinfoorg|syswow64|tmp|uninstallexe|userappdata|usercf|userdesktop|userdocs|userfavorites|userfonts|userinfoname|userinfoorg|userinfoserial|username|userpf|userprograms|usersavedgames|usersendto|userstartmenu|userstartup|usertemplates|win|wizardhwnd)'
  constants_deprecated: '(?:cf|cf32|cf64|commonfavorites|fonts|pf|pf32|pf64|sendto)'
  messages: '(?:AbortRetryIgnoreCancel|AbortRetryIgnoreIgnore|AbortRetryIgnoreRetry|AbortRetryIgnoreSelectAction|AboutSetupMenuItem|AboutSetupMessage|AboutSetupNote|AboutSetupTitle|AdminPrivilegesRequired|ApplicationsFound|ApplicationsFound2|BadDirName32|BadGroupName|BeveledLabel|BrowseDialogLabel|BrowseDialogTitle|ButtonBack|ButtonBrowse|ButtonCancel|ButtonFinish|ButtonInstall|ButtonNewFolder|ButtonNext|ButtonNo|ButtonNoToAll|ButtonOK|ButtonStopDownload|ButtonWizardBrowse|ButtonYes|ButtonYesToAll|CannotContinue|CannotInstallToNetworkDrive|CannotInstallToUNCPath|ChangeDiskTitle|ClickFinish|ClickNext|CloseApplications|CompactInstallation|ComponentsDiskSpaceGBLabel|ComponentsDiskSpaceMBLabel|ComponentSize1|ComponentSize2|ConfirmDeleteSharedFile2|ConfirmDeleteSharedFileTitle|ConfirmTitle|ConfirmUninstall|CustomInstallation|DirDoesntExist|DirDoesntExistTitle|DirExists|DirExistsTitle|DirNameTooLong|DiskSpaceGBLabel|DiskSpaceMBLabel|DiskSpaceWarning|DiskSpaceWarningTitle|DontCloseApplications|DownloadingLabel|ErrorChangingAttr|ErrorCloseApplications|ErrorCopying|ErrorCreatingDir|ErrorCreatingTemp|ErrorDownloadAborted|ErrorDownloadFailed|ErrorDownloadSizeFailed|ErrorExecutingProgram|ErrorFileHash1|ErrorFileHash2|ErrorFileSize|ErrorFunctionFailed|ErrorFunctionFailedNoCode|ErrorFunctionFailedWithMessage|ErrorIniEntry|ErrorInternal2|ErrorOpeningReadme|ErrorProgress|ErrorReadingExistingDest|ErrorReadingSource|ErrorRegCreateKey|ErrorRegisterServer|ErrorRegisterTypeLib|ErrorRegOpenKey|ErrorRegSvr32Failed|ErrorRegWriteKey|ErrorRenamingTemp|ErrorReplacingExistingFile|ErrorRestartingComputer|ErrorRestartReplace|ErrorTitle|ErrorTooManyFilesInDir|ExistingFileNewer2|ExistingFileNewerKeepExisting|ExistingFileNewerOverwriteExisting|ExistingFileNewerOverwriteOrKeepAll|ExistingFileNewerSelectAction|ExistingFileReadOnly2|ExistingFileReadOnlyKeepExisting|ExistingFileReadOnlyRetry|ExitSetupMessage|ExitSetupTitle|FileAbortRetryIgnoreIgnoreNotRecommended|FileAbortRetryIgnoreSkipNotRecommended|FileExists2|FileExistsKeepExisting|FileExistsOverwriteExisting|FileExistsOverwriteOrKeepAll|FileExistsSelectAction|FileNotInDir2|FinishedHeadingLabel|FinishedLabel|FinishedLabelNoIcons|FinishedRestartLabel|FinishedRestartMessage|FullInstallation|GroupNameTooLong|HelpTextNote|IncorrectPassword|InfoAfterClickLabel|InfoAfterLabel|InfoBeforeClickLabel|InfoBeforeLabel|InformationTitle|InstallingLabel|InvalidDirName|InvalidDrive|InvalidGroupName|InvalidParameter|InvalidPath|LastErrorMessage|LdrCannotCreateTemp|LdrCannotExecTemp|LicenseAccepted|LicenseLabel|LicenseLabel3|LicenseNotAccepted|MustEnterGroupName|NewFolderName|NoProgramGroupCheck2|NoRadio|NotOnThisPlatform|NoUninstallWarning|NoUninstallWarningTitle|OnlyAdminCanUninstall|OnlyOnTheseArchitectures|OnlyOnThisPlatform|PasswordEditLabel|PasswordLabel1|PasswordLabel3|PathLabel|PowerUserPrivilegesRequired|PrepareToInstallNeedsRestart|PreparingDesc|PreviousInstallNotCompleted|PrivilegesRequiredOverrideAllUsers|PrivilegesRequiredOverrideAllUsersRecommended|PrivilegesRequiredOverrideCurrentUser|PrivilegesRequiredOverrideCurrentUserRecommended|PrivilegesRequiredOverrideInstruction|PrivilegesRequiredOverrideText1|PrivilegesRequiredOverrideText2|PrivilegesRequiredOverrideTitle|ReadyLabel1|ReadyLabel2a|ReadyLabel2b|ReadyMemoComponents|ReadyMemoDir|ReadyMemoGroup|ReadyMemoTasks|ReadyMemoType|ReadyMemoUserInfo|RunEntryExec|RunEntryShellExec|SelectComponentsDesc|SelectComponentsLabel2|SelectDirBrowseLabel|SelectDirDesc|SelectDirectoryLabel|SelectDirLabel3|SelectDiskLabel2|SelectLanguageLabel|SelectLanguageTitle|SelectStartMenuFolderBrowseLabel|SelectStartMenuFolderDesc|SelectStartMenuFolderLabel3|SelectTasksDesc|SelectTasksLabel2|SetupAborted|SetupAlreadyRunning|SetupAppRunningError|SetupAppTitle|SetupFileCorrupt|SetupFileCorruptOrWrongVer|SetupFileMissing|SetupLdrStartupMessage|SetupWindowTitle|SharedFileLocationLabel|SharedFileNameLabel|ShowReadmeCheck|ShutdownBlockReasonInstallingApp|ShutdownBlockReasonUninstallingApp|SourceDoesntExist|SourceIsCorrupted|StatusClosingApplications|StatusCreateDirs|StatusCreateIcons|StatusCreateIniEntries|StatusCreateRegistryEntries|StatusExtractFiles|StatusRegisterFiles|StatusRestartingApplications|StatusRollback|StatusRunProgram|StatusSavingUninstall|StatusUninstalling|StopDownload|TranslatorNote|UninstallAppFullTitle|UninstallAppRunningError|UninstallAppTitle|UninstallDataCorrupted|UninstallDisplayNameMark|UninstallDisplayNameMark32Bit|UninstallDisplayNameMark64Bit|UninstallDisplayNameMarkAllUsers|UninstallDisplayNameMarkCurrentUser|UninstallDisplayNameMarks|UninstalledAll|UninstalledAndNeedsRestart|UninstalledMost|UninstallNotFound|UninstallOnlyOnWin64|UninstallOpenError|UninstallStatusLabel|UninstallUnknownEntry|UninstallUnsupportedVer|UserInfoDesc|UserInfoName|UserInfoNameRequired|UserInfoOrg|UserInfoSerial|WelcomeLabel1|WelcomeLabel2|WindowsServicePackRequired|WindowsVersionNotSupported|WinVersionTooHighError|WinVersionTooLowError|WizardInfoAfter|WizardInfoBefore|WizardInstalling|WizardLicense|WizardPassword|WizardPreparing|WizardReady|WizardSelectComponents|WizardSelectDir|WizardSelectProgramGroup|WizardSelectTasks|WizardUninstalling|WizardUserInfo|YesRadio)'

contexts:
  # Inno Setup.
  main:
    # Common.
    - include: line-spanning
    - include: preprocessor
    - include: comment
    # Sections.
    - include: setup-section
    - include: lang-options-section
    - include: messages-section
    - include: custom-messages-section
    - include: code-section
    - include: other-section
    - include: unknown-section
    # Any content outside of section is invalid.
    - include: invalid-content

  # Pop context when including line is reached.
  pop-here:
    - match: ''
      pop: true

  # Line end with consideration of line spanning.
  line-end:
    # Line end pops the context already at the preceding whitespace.
    - match: '(?=\s*$)'
      pop: true
    # However line spanning symbol prevents popping.
    - include: line-spanning

  # Line spanning continues context over a line end.
  line-spanning:
    # Push a temporary context to break out to the top scope.
    - match: '(?<=\s)(?=\\[ \t]*$)'
      push:
        - clear_scopes: true
        # Match invalid line spanning. Using \s would wrongly format til the end of the buffer.
        - match: '(\\)([ \t]+)$'
          captures:
            1: punctuation.separator.continuation.inno
            2: invalid.illegal.inno
        # Match valid line spanning.
        - match: '\\$'
          scope: punctuation.separator.continuation.inno
          # Resume parsing at the next line.
          push:
            - meta_scope: source.inno meta.preprocessor.inno
            - match: '(?=\s*\S|^\s*$)'
              pop: true
        # Pop the temporary context.
        - include: pop-here

  # Preprocessor code.
  preprocessor:
    - include: preprocessor-directive
    - include: preprocessor-inline
    - include: preprocessor-comment

  # Preprocessor directive.
  preprocessor-directive:
    # Using '^\s*(?=#)' would clear scopes in random places.
    - match: '^(?=\s*#)'
      push:
        - clear_scopes: true
        - meta_content_scope: source.inno meta.preprocessor.inno
        - include: scope:meta.preprocessor.inno
      with_prototype:
        - include: line-end

  # Preprocessor inline.
  preprocessor-inline:
    # Push a temporary context to break out to the top scope.
    - match: '(?=\s*\{#)'
      push:
        - clear_scopes: true
        - meta_scope: source.inno
        - match: '\{#'
          scope: meta.preprocessor.inno keyword.other.inno
          push: scope:meta.preprocessor.inno
          with_prototype:
            - include: line-end
            - match: '(?=\})'
              pop: true
        - match: '\}'
          scope: meta.preprocessor.inno keyword.other.inno
          pop: true
        # Pop the temporary context.
        - include: pop-here

  # Preprocessor comment.
  preprocessor-comment:
    - match: '^\s*(//)'
      captures:
        1: punctuation.definition.comment.inno
      push:
        - clear_scopes: true
        - meta_scope: source.inno meta.preprocessor.inno comment.line.double-slash.inno
        - include: line-end

  # Ordinary comment.
  comment:
    - match: '^\s*(;)'
      captures:
        1: punctuation.definition.comment.inno
      push:
        - meta_scope: comment.line.semicolon.inno
        - include: line-end

  # Setup section.
  setup-section:
    - match: '(?i)^\s*(\[Setup\])\s*$'
      captures:
        1: meta.section-tag.inno entity.name.namespace.inno
      push:
        - include: section-common
        - include: boolean-expression-directive
        - include: keyword-value-directive
        - include: invalid-content

  # LangOptions section.
  lang-options-section:
    - match: '(?i)^\s*(\[LangOptions\])\s*$'
      captures:
        1: meta.section-tag.inno entity.name.namespace.inno
      push:
        - include: section-common
        - include: language-prefix
        - include: lang-options-directive
        - include: invalid-content

  # Messages section.
  messages-section:
    - match: '(?i)^\s*(\[Messages\])\s*$'
      captures:
        1: meta.section-tag.inno entity.name.namespace.inno
      push:
        - include: section-common
        - include: language-prefix
        - include: inno-message
        - include: invalid-content

  # CustomMessages section.
  custom-messages-section:
    - match: '(?i)^\s*(\[CustomMessages\])\s*$'
      captures:
        1: meta.section-tag.inno entity.name.namespace.inno
      push:
        - include: section-common
        - include: language-prefix
        - include: custom-message
        - include: invalid-content

  # Code section.
  code-section:
    - match: '(?i)^\s*(\[Code\])\s*$'
      captures:
        1: meta.section-tag.inno entity.name.namespace.inno
      push:
        - meta_content_scope: source.pascal.embedded.inno source.pascal.inno
        - include: scope:source.pascal.inno
      with_prototype:
        # Line spanning is handled by Inno Pascal syntax.
        - include: preprocessor
        - include: section-end

  # Other section.
  other-section:
    - match: '(?i)^\s*(\[{{sections}}\])\s*$'
      captures:
        1: meta.section-tag.inno entity.name.namespace.inno
      push:
        - include: section-common
        - include: boolean-expression-parameter
        - include: flag-parameter
        - include: keyword-parameter
        - include: value-parameter
        - include: invalid-content

  # Unknown section.
  unknown-section:
    - match: '(?i)^\s*(\[[^\]]*\])\s*$'
      captures:
        1: meta.section-tag.inno
      push:
        - include: section-common

  # Common includes for sections.
  section-common:
    - include: line-spanning
    - include: preprocessor
    - include: comment
    - include: section-end

  # End of section.
  section-end:
    - match: '(?i)^(?=\s*\[)'
      pop: true

  # Marks any non-whitespace content as invalid.
  invalid-content:
    - match: '\S.*?(?=\s*(?:\\|$))'
      scope: invalid.illegal.inno

  # Setup directive expecting boolean expression.
  boolean-expression-directive:
    - match: '(?i)^\s*({{setup_directives_boolean}})\s*(=)'
      captures:
        1: meta.directive.inno keyword.other.inno
        2: keyword.operator.assignment.inno
      push:
        - meta_content_scope: source.pascal.embedded.inno source.pascal.inno
        - match: '(?i)\s*(?:yes|no)(?=\s*$)'
          scope: constant.language.inno
        - include: scope:source.pascal.inno
      with_prototype:
        - include: line-end
        - include: preprocessor

  # Setup directive expecting keywords or value.
  keyword-value-directive:
    - match: '(?i)^\s*(({{setup_directives_other}}|{{setup_directives_deprecated}})|([^=]*?))\s*(=)'
      captures:
        1: meta.directive.inno
        2: keyword.other.inno
        3: invalid.illegal.inno
        4: keyword.operator.assignment.inno
      push:
        - include: line-end
        - match: '(?i)\s*\b{{keywords_setup}}\b'
          scope: constant.language.inno
        - include: directive-number
        - include: directive-string

  # Language prefix used in LangOptions, Messages and CustomMessages sections.
  language-prefix:
    - match: '(?i)^\s*(([a-z]{2})|([^=.]*))(\.)'
      captures:
        1: meta.language.inno
        2: keyword.other.inno
        3: invalid.illegal.inno
        4: punctuation.accessor.inno

  # LangOptions directive.
  lang-options-directive:
    - match: '(?i)(?:^\s*|(?<=\.))(({{lang_options_directives}})|([^=]*?))\s*(=)'
      captures:
        1: meta.directive.inno
        2: keyword.other.inno
        3: invalid.illegal.inno
        4: keyword.operator.assignment.inno
      push:
        - include: line-end
        - include: directive-number
        - include: directive-string

  # Inno Setup message. Only known messages are assigned the keyword scope.
  inno-message:
    - match: '(?i)(?:^\s*|(?<=\.))(({{messages}})|([^=]*?))\s*(=)'
      captures:
        1: meta.message.inno
        2: keyword.other.inno
        3: invalid.illegal.inno
        4: keyword.operator.assignment.inno
      push:
        - include: line-end
        - include: message-string

  # Custom message. All messages are assigned the keyword scope.
  custom-message:
    - match: '(?i)(?:^\s*|(?<=\.))(([a-z_]\w*)|([^=]*?))\s*(=)'
      captures:
        1: meta.message.inno
        2: keyword.other.inno
        3: invalid.illegal.inno
        4: keyword.operator.assignment.inno
      push:
        - include: line-end
        - include: message-string

  # Parameter expecting boolean expression.
  boolean-expression-parameter:
    - match: '(?i)\s*(\b{{parameters_boolean}})\s*(:)'
      captures:
        1: meta.parameter.inno keyword.other.inno
        2: keyword.operator.assignment.inno
      push:
        - meta_content_scope: source.pascal.embedded.inno source.pascal.inno
        - include: separator
        - include: scope:source.pascal.inno
      with_prototype:
        - include: line-end
        - include: preprocessor

  # Parameter expecting flags.
  flag-parameter:
    - match: '(?i)\s*(\b{{parameters_flag}})\s*(:)'
      captures:
        1: meta.parameter.inno keyword.other.inno
        2: keyword.operator.assignment.inno
      push:
        - include: line-end
        - include: separator
        - match: '(?i)\s*\b{{flags}}\b'
          scope: constant.language.inno

  # Parameter expecting keywords.
  keyword-parameter:
    - match: '(?i)\s*(\b{{parameters_keyword}})\s*(:)'
      captures:
        1: meta.parameter.inno keyword.other.inno
        2: keyword.operator.assignment.inno
      push:
        - include: line-end
        - include: separator
        - match: '(?i)\s*\b{{keywords_other}}\b'
          scope: constant.language.inno

  # Parameter expecting value.
  value-parameter:
    - match: '(?i)\s*(\b({{parameters_other}})|([^:]*?))\s*(:)'
      captures:
        1: meta.parameter.inno
        2: keyword.other.inno
        3: invalid.illegal.inno
        4: keyword.operator.assignment.inno
      push:
        - include: line-end
        - include: separator
        - include: parameter-number
        - include: parameter-string

  # Parameter separator (pops the context).
  separator:
    - match: ';'
      scope: punctuation.separator.inno
      pop: true

  # Directive number. Must end at line spanning or line end.
  directive-number:
    # Hexadecimal number.
    - match: '\$\h+(?=\s*(?:\s\\|$))'
      scope: constant.numeric.integer.hexadecimal.inno
    # Integer, float or version.
    - match: '\b[0-9]+(?:\.[0-9]+)*(?=\s*(?:\s\\|$))'
      scope: constant.numeric.inno

  # Parameter number. Must end at separator, line spanning or line end.
  parameter-number:
    # Hexadecimal number.
    - match: '\$\h+(?=\s*(?:;|\s\\|$))'
      scope: constant.numeric.integer.hexadecimal.inno
    # Integer, float or version.
    - match: '\b[0-9]+(?:\.[0-9]+)*(?=\s*(?:;|\s\\|$))'
      scope: constant.numeric.inno

  # Directive string.
  # Can be double-quoted or unquoted. Constants are expanded.
  # Quotes are valid, also in constants. Opening braces must be escaped.
  directive-string:
    # Quoted string. Starts and ends with a quote.
    - match: '"(?=.*"\s*$)'
      scope: punctuation.definition.string.begin.inno
      push:
        - meta_scope: string.quoted.inno
        - include: line-end
        - include: preprocessor-inline
        # Only last quote terminates the string, other quotes are escaped.
        - match: '"(?!\s*$)'
          scope: constant.character.escape.inno
        - match: '"'
          scope: punctuation.definition.string.end.inno
          pop: true
        # Push temporary constant-matching context to handle quotes.
        - match: '(?=\{)'
          push:
            - include: constant
            - include: pop-here
          with_prototype:
            # Preprocessor can contain strings so must be included to take precedence.
            - include: preprocessor-inline
            - match: '"(?!\s*$)'
              scope: constant.character.escape.inno
            # Premature end of string.
            - match: '(?=")'
              pop: true
    # Unquoted string. Can contain quotes.
    - match: '(?=\S)'
      push:
        - meta_content_scope: string.unquoted.inno
        - include: line-end
        - include: preprocessor-inline
        # Escape quotes for readability.
        - match: '"'
          scope: constant.character.escape.inno
        # Push temporary constant-matching context to handle quotes.
        - match: '(?=\{)'
          push:
            - include: constant
            - include: pop-here
          with_prototype:
            # Preprocessor can contain strings so must be included to take precedence.
            - include: preprocessor-inline
            - match: '"'
              scope: constant.character.escape.inno
        - include: constant

  # Parameter string.
  # Can be double-quoted or unquoted. Constants are expanded.
  # Quotes must be escaped, also in constants. Opening braces must be escaped.
  parameter-string:
    # Quoted string. Terminates at unescaped quote.
    - match: '"'
      scope: punctuation.definition.string.begin.inno
      push:
        - meta_scope: string.quoted.inno
        - include: line-end
        - include: preprocessor-inline
        # Unescaped quote terminates the string.
        - match: '""'
          scope: constant.character.escape.inno
        - match: '"'
          scope: punctuation.definition.string.end.inno
          set: parameter-end
        # Push temporary constant-matching context to handle quotes.
        - match: '(?=\{)'
          push:
            - include: constant
            - include: pop-here
          with_prototype:
            # Preprocessor can contain strings so must be included to take precedence.
            - include: preprocessor-inline
            - match: '""'
              scope: constant.character.escape.inno
            # Premature end of string.
            - match: '(?=")'
              pop: true
    # Unquoted string. Quotes are invalid.
    - match: '(?=\S)'
      push:
        - meta_content_scope: string.unquoted.inno
        - include: line-end
        - include: preprocessor-inline
        # Quote or semicolon terminates the string at whitespace preceding it.
        - match: '(?=\s*[;"])'
          set: parameter-end
        # Push temporary constant-matching context to handle quotes.
        - match: '(?=\{)'
          push:
            - include: constant
            - include: pop-here
          with_prototype:
            # Preprocessor can contain strings so must be included to take precedence.
            - include: preprocessor-inline
            # Premature end of string.
            - match: '(?=\s*[;"])'
              pop: true

  # Expected end of parameter. Used to mark multiple values in a single parameter as invalid.
  parameter-end:
    - include: line-end
    - include: preprocessor-inline
    # Pop when separator is encountered, but allow it to pop also parent context.
    - match: '(?=;)'
      pop: true
    # Any non-whitespace character up to separator, line spanning or line end are invalid.
    - match: '\S.*?(?=\s*(?:;|\\|$))'
      scope: invalid.illegal.inno

  # Message string.
  # Always unquoted. Constants are not expanded.
  # Quotes and opening braces are valid.
  message-string:
    # Unquoted string.
    - match: '(?=\S)'
      push:
        - meta_content_scope: string.unquoted.inno
        - include: line-end
        - include: preprocessor-inline
        - match: '%\d|&'
          scope: constant.other.placeholder.inno
        - match: '%[n%]'
          scope: constant.character.escape.inno

  # Constant.
  constant:
    # Escaped opening brace.
    - match: '\{\{'
      scope: constant.character.escape.inno
    # Predefined constant.
    - match: '(?i)(\{)(?:{{constants}}|{{constants_deprecated}})(\})'
      scope: support.constant.inno
      captures:
        1: punctuation.section.braces.begin.inno
        2: punctuation.section.braces.end.inno
    # Dynamic constant.
    - match: '(\{)(?:%|(?:code|drive|ini|cm|reg|param):)'
      captures:
        1: punctuation.section.braces.begin.inno
      push:
        - meta_scope: support.constant.inno
        - include: line-end
        - include: preprocessor-inline
        - include: constant
        - match: '\}'
          scope: punctuation.section.braces.end.inno
          pop: true
        - match: '\|'
          scope: punctuation.separator.inno
        - match: '(?i)%[0-9a-f]{2}'
          scope: constant.character.escape.inno
    # Invalid constant.
    - match: '\{'
      push:
        - meta_scope: invalid.illegal.inno
        - include: line-end
        - include: preprocessor-inline
        - include: constant
        - match: '\}'
          pop: true
